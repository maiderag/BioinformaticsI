def Probablekmer(P, kmer):
    p = 1
    for i in range(len(kmer)):
        if kmer[i] == 'A':
            p = p*P[0][i]
        elif kmer[i] == 'C':
            p = p*P[1][i]
        elif kmer[i] == 'G':
            p = p*P[2][i]
        elif kmer[i] == 'T':
            p = p*P[3][i]
    return p 

def ProfilemostProbable(Text, k, P):
    mostp = 0
    mostprobkmer = Text[:k] 
    for i in range(len(Text)-k+1):
        kmer = Text[i:i+k]
        p = Probablekmer(P, kmer)
        if p>mostp:
            mostp = p
            mostprobkmer = kmer
    return mostprobkmer

def Hamming(p,q):
    count =0
    for i in range(len(p)):
        if p[i]!=q[i]:
            count +=1
    return count


import numpy as np
def CreateProfile(dnapat):
    k = len(dnapat[0])
    profile = np.zeros((4,k))

    for i in dnapat:
        for j in range(len(i)):
            if i[j] =='A':
                profile[0,j]+=1
            elif i[j] =='C':
                profile[1,j]+=1
            elif i[j] == 'G':
                profile[2,j]+=1
            elif i[j] == 'T':
                profile[3,j]+=1
    
    profile = profile/len(dnapat)
    return profile

import statistics
from statistics import mode
def Consensus(Motifs):
    con=[]
    for i in range(len(Motifs[0])):
        con.append(mode([item[i] for item in Motifs]))
    return(' '.join([str(elem) for elem in con]).replace(' ',''))

def Score(Motfs):
    s = 0
    consensus = Consensus(Motfs)
    for i in Motfs:
        s += Hamming(consensus, i)
    return s



#print(Score('GGCGTTCAGGCA','GGC'))

def DistanceBetweenPatternAndStrings(Pattern,Dna):
    k = len(Pattern)
    distance = 0
    dna = Dna.split()
    for sText in dna:
        HammingDistance = float('inf')
        for i in range(len(sText)-k+1):
            kmer = sText[i:i+k]
            h = Hamming(Pattern, kmer)
            if HammingDistance > h:
                HammingDistance = h
        distance = distance + HammingDistance
    return distance

#print(DistanceBetweenPatternAndStrings('',''))

def GreedyMotifSearch(Dna, k,t):
    dna = Dna.split()
    BestMotifs = []
    for i in dna:
        BestMotifs.append(i[0:k])
    String1 = dna[0]
    for i in range(len(String1)-k+1):
        Motif = []
        Motif.append(String1[i:i+k])
        for j in dna[1:t]:
            profile = CreateProfile(Motif)
            Motif.append(ProfilemostProbable(j, k, profile))
        if Score(Motif) < Score(BestMotifs):
            BestMotifs = Motif
    return ' '.join([str(elem) for elem in BestMotifs]).replace('','')

#print(GreedyMotifSearch('GGCGTTCAGGCA AAGAATCAGTCA CAAGGAGTTCGC CACGTCAATCAC CAATAATATTCG',3,5))
#print(GreedyMotifSearch('GGCGTTCAGGCA AAGAATCAGTCA CAAGGAGTTCGC CACGTCAATCAC CAATAATATTCG',3,5))

print(GreedyMotifSearch('GCGGTAGGGCACTATTATGCGGCACCCTGGAGGTTCTTCAAGTGCCAATCAAATCTAGGGCTGACCCCCAACATTCTCTGCTAGTTCTTTAACTGGCCGGGGCAAATTAAACGAGTTGCTACAGTGGGCGTAATTCCACTGTGCTGATTGGCTTCG CTATGGGCACCGCGCCGGCAGAGTTGTCGACCATTCACTGCTGAGAGAACTAGCATAAGATCTTACGACCTTACACTCCGCGTACGGGGAAGCGGTATTCGCGGGTATCCCACCCTCGGGCGTTCAGAGACCTGCTAGAGCGCACTGTAACACCGT GCCTACGCAGACGACGCTATCAACGTGTTGGAGCTCTTATTCGTAATCTGCTGTAGGGGCTTGCGAAACTATTCCGCACCTCTCTGTGTCAGGGAGATCTTGCAGCATACATTTGGCTTAGTAGTATTCTATATAGGGTCCTACGCCTCACTTATC CGCGTGCATGACAGTAGTACAGAATCTTTCATGATACTTAAGTAACGCCAGGTCCAATGGTGGCAACGTGTACGTATCCTATTTATATCGCGAACGGTGGAGGGGCCTCCTGTTCCACTTGGGCTTTCGGTAACAATGGGCTTATAACCGGCGGAA CCCAATAATGTCCTAGCGACATTTTATGCGCCTCTAAGACTCTCAGGTTAATGGTCACCACCACCAATGGAAAATAGATCACGTCTGTCACCTTTGAGACGCTAGCGACTGCAAGCGCTTCGGTGTGTGGGCACACTCTGCTTAATCCTGATATCT GTCAAACCGGTTGTTGGCCAACAATGTATAATTAGATTCTGACCTAGGGTGGCCCGGATTCTCCCAGAGGCCTCGTAGCGCATGATCAGCAAGCATTTTCAGCACGGTGGGAGGATCAGGCCCTCTACATCCAGCTGCGCCTTGACAGTCTGCCTA CCCAATAGTAGGAAGTCCTACTATGCAGGCATTTTACGATAGTGGACTCCGCATTGAAACAAGGTTTAATTCTAATAATCATGAGTTTGGGATGCCAAAGCTGACGATGAATCCTTAAGACCGATCGGAATAACAATAGGCATACGTAATCCAAGC TTTTATCTATGCGGGCAATAGTGAACCATCAAATGTGTTACTGCGTCGACACTGAGCCTACTGGTATGATTATGAACGTCAAAGCGGAAGGTATCTACACTGCCAACGCCTAACGAGAACGTCTCAGCACATATCTGCCTATAAACTTTTCACATG CACAGACACAGATTACTTGCGCGTTAGGATACAATGGCGGTGTTACTAACACTGTGCTTAGCCACACACAGAAGTTCGGGACTTCCGCTCCATAACGAGCTTTGTCGACTTCTAATTGTACCCGGTTCGAACCGGTGGTTGATCCATATCCAGTGC CTTTCCCATTAGACTTCCCTTTGTGCCGATGAACAATAAGTAAGCCCAACAGTAGGCCTATTCGCACGTTGCATAAATTACTGAGCTAGATAAACAACAGGCTCATAGGGAGCGAACCCATCCGTCTGATACATAAACCCCAACCTAATTGCCCAA ACAGTTGGCCTAATTTGTAACCCGACGTAATACATCAAGACCAGCCGACCTTTTAGCTTACGAGTTCTGCGCGTCTGAAGCGGAGTACCCAAGCTTACTGAAACCCGTTTACACGACAAAATAACAGGACGGATGGACATAGCAAATAGAGTCGAA TCGATGTGAAGTTCTAAACTGACCTTAACCACATGTCCCACGGAGTGCCCCGAGTCGTCTCTCAAAGCTTATACATTTCGCCTATCAAAGTACATGTAGACTCCTTTCCGAGGACAGTGCAAGAACGTCGACTGACATCTTTGCTAATATGGGCGT CCTTCGCAACTTACAATCCGCCTACATTGCTAGAGGAATTATTGGCGGGAGGCGACTACCGGGAGTCTCCTTGTTACGGACTTCTAGTAAACCACGTTAGGCGATAGCGCATACTCAGGATGGAGTTCGCCCGCTCAAAGTTGGACGCGGCACGTA AATGAAGTTGCTGTCCACCATTACCTACCCTGAAGACCACCAGGGGACTGGCACTTGACACCATTACTATTTCGCTTAGTAACTCTAAAACGGTCACAGACACTCGAAGCTTCCGTCTACACGTCCGTGCAAGCAAACGCCTGTACAGTTGGCCTA GCGTCATCAGAGGGTTTGGGGCATTTCGGAAGGTTTGTGTCACACAGTCCTTCTCACTTAACACGCACCCTTAACGCCTACGACGTTCTTCCGGAACTAAACACTGCCGGTTGTCTACGTCATAGCTGGAAGACAATAGGCTTAAATGAGTTGGGC ACTCCATTAATTCATTACGCGTCCTATGTGCTATTTCGCGCGAAATAGGCCGGAGTATCCCCTCCAACATGAAAAACCAAATCCGACCACACCTCGATGGCGTGTTCGACACTCCGCTTACCAACACAAACTGGTGCCTATTACTATCTAAGTCAT ACACTGGGCTTACTGTGAACGAAATCTCGGGTGGGTGCGTCTTCCGAAAGCGACGACCATATCGCGAGCCGTTTCCCTGATCTATAAGCTAGCGCTCGAATTGGAGCTAGCTGTCGTGCGGAAAGTTCACAAGAGCGGGTACAAAATAGCACTAGG TAAATATTAGGGTCCATACTGGCACCCGCGTACTCTTCGCACAGTGTAGAATAGGGAAACACAATCGGCTTACGAACGCCGAACGGTTTGCCCACCAACGGTCGCGGGAGGGTGGGGTAGGAGAGTTTGTGCAAACAGCGGACGCTATGGAATCGA TGCCACTGGGAATAACCGGGCCACTTTCTCATCAATACAGTCGGCGTAGACAGTTCAGGATTGGAAGCTAAATACCCCTGAAAAGATGTGCCGAGCAGGTTCCCCGTCTGTAAGTCCTTCGAATTTCTGTCGCCACTATAATCTTTGCCGAATTTC TTAAGGAGAGACCAAATGCAGACGCGATCATCCGTTACACTTAGCCTATATATATCCTCGCTGAAGTATACGGGGGAAATCAGGATCCGAGACAGTTAATATTTTCAGGTAGCTAGTTCCCTGCAAGTCGGTGCAGTGACCTATATGCTACTTAGG GCGATCATGCATGAGTCTACTTGTGACCTCTGGGATTACCATTCGGGGGGTGGTAGGATCCGGGTATGCCACGATACTTCGCGCACATTGTGCATAGTGCCGCCGTGCTAAACTTATGCCGCTACGAATCAGACCAGGATATCGTATAATCACCGT CTCTTGGGACAACCAAAAATTATGTTACTTAACGGGTTGCGCTGAGCTTCTAGTAGCCAGGTTATGCCCCATCACCGCACTTGATCGACACGCAGCTTGAATCGGTGTACAATGGGCCTAGGATTAGCTCACCATAATCATAGAAGACTGACAACC AATCCCATGACGTTTAGCGCGTCACAGGGCCCCCGCACTCTTGTTCGACGGACTACCCGCAAGTGTGACGGCTTATACTCTCATCCCTGATAAATTTCAGTGATCTGATCTCAGAGAGAGACACTCTGCGTAAAGAAACGCCTTGCCGATTATGTT TAATGCGATTACGAAACGCCTCATGCGTTAGCCCGCATGAACCTCTGACCCATCCCCGTTTGGACTGTTGCCCAAATCAATTATCGAAACAGACAAACAGTTAGCATATTAGATCTCAGGCATGACCTTTAGGAATTTTCCTCCAGGATGAGCGGC GTCTTGCGGTTTGTATTTCTACATCGAGAATACGAAGCAAGATATTCATAGCTCAGCATAACAATGGGCCTAGATCTGCTTATCGCCATTTTTCCAAAATAGTTGATACATGGACACCAAGTAGTTTTATGATATTCTCGTAGACACCCTATGGCT',12,25))
