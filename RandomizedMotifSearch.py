import random
import numpy as np
import statistics
from statistics import mode

def CreateProfile(dnapat):
    k = len(dnapat[0])
    profile = np.zeros((4,k))
    for i in dnapat:
        for j in range(len(i)):
            if i[j] =='A':
                profile[0,j]+=1
            elif i[j] =='C':
                profile[1,j]+=1
            elif i[j] == 'G':
                profile[2,j]+=1
            elif i[j] == 'T':
                profile[3,j]+=1
    profile = profile +1
    profile = profile/(len(dnapat)+4)
    return profile

def Hamming(p,q):
    count =0
    for i in range(len(p)):
        if p[i]!=q[i]:
            count +=1
    return count

def Consensus(Motifs):
    con=[]
    for i in range(len(Motifs[0])):
        con.append(mode([item[i] for item in Motifs]))
    return(' '.join([str(elem) for elem in con]).replace(' ',''))

def Score(Motfs):
    s = 0
    consensus = Consensus(Motfs)
    for i in Motfs:
        s += Hamming(consensus, i)
    return s

def Probablekmer(P, kmer):
    p = 1
    for i in range(len(kmer)):
        if kmer[i] == 'A':
            p = p*P[0][i]
        elif kmer[i] == 'C':
            p = p*P[1][i]
        elif kmer[i] == 'G':
            p = p*P[2][i]
        elif kmer[i] == 'T':
            p = p*P[3][i]
    return p 

def ProfilemostProbable(Text, k, P):
    mostp = 0
    mostprobkmer = Text[:k] 
    for i in range(len(Text)-k+1):
        kmer = Text[i:i+k]
        p = Probablekmer(P, kmer)
        if p>mostp:
            mostp = p
            mostprobkmer = kmer
    return mostprobkmer

def RandomizedMotifSearch(Dna,k,t):
    dna = Dna.split()
    Motifs=[]
    for i in range(t):
        p = random.randint(0,len(dna[0])-k)
        string = dna[i]
        Motifs.append(string[p:p+k])
    BestMotifs = Motifs
    while 1:
        profile = CreateProfile(Motifs)
        for i in range(t):
            Motifs[i] = ProfilemostProbable(dna[i],k,profile)

        if Score(Motifs)<Score(BestMotifs):
            BestMotifs = Motifs
        else:
            return BestMotifs

def RandomizeMotifSearch(Dna,k,t,r):

    BestMotif = RandomizedMotifSearch(Dna,k,t)
    for i in range(1,r):
        Motif = RandomizedMotifSearch(Dna,k,t)
        if Score(Motif)<Score(BestMotif):
            BestMotif = Motif
    return (' '.join([str(elem) for elem in BestMotif]).replace('',''))


#print(RandomizedMotifSearch('CGCCCCTCTCGGGGGTGTTCAGTAAACGGCCA GGGCGAGGTATGTGTAAGTGCCAAGGTGCCAG TAGTACCGAGACCGAAAGAAGTATACAGGCGT TAGATCAAGTTTCAGGTGCACGTCGGTGAACC AATCCACCAGCTCCACGTGCAATGTTGGCCTA',8,5))

#print(RandomizeMotifSearch('CGCCCCTCTCGGGGGTGTTCAGTAAACGGCCA GGGCGAGGTATGTGTAAGTGCCAAGGTGCCAG TAGTACCGAGACCGAAAGAAGTATACAGGCGT TAGATCAAGTTTCAGGTGCACGTCGGTGAACC AATCCACCAGCTCCACGTGCAATGTTGGCCTA',8,5,1000))

#print(RandomizeMotifSearch('GGGGGCACCCTTGAGCCCGGTTGATACCACGTGAAGACCGCCCCGAAATCTTCGAGTTAACCGCGAGTTTCGTTACACGACCTAGCGACAATATTGGCGTGTTCACTTCACTGCATAGGGACAGACTTGGACAACTCGTCTTTAAAAGACTGGTTTCACGTCCGGGGGCACCCTTGAG CCCGGTTGATACCACGTGAAGACCGCCCCGAAATCTTCGAGTTAACCGCGGAAGGCATCTCCAGAAGTTTCGTTACACGACCTAGCGACAATATTGGCGTGTTCACTTCACTGCATAGGGACAGACTTGGACAACTCGTCTTTAAAAGACTGGTTTCACGTCCGGGGGCACCCTTGAG AAGTCGGCTTTTATCGGACCAACAAAAGGGGCGCTCCCGCTACGTCAAGACCTGACTGACGTCCTATAACGAGGGAAACACACCCAGTTGGAATATTGCTCCAGAACCTTGTCTCCGCTACCCTGACTGGTGAGGGTGAGTTATAGTGTACTTAAATGGCATTGGTACATTACTTCGG AAGGGGATTGAGGTATGCTCAGACTGCCGAACAGTGGTCGACGCAGTGATATTCTAATGATCGGATCTCCAGAGTTCCCGAATGTGGTGCCAAAGCTCACTAGAATCCGTGCCCAAACGTTCGGTTTAATGATGCCTCCCTAAGTGGTACGCCCCCGCTCTGGCACTAGTCAAAGGCT GGCTGGTTTGTTTGAATAGTAATCCAGACTATGGTCATCACTCGAGGTAGGAAGACTTAAAAAGAGGGCCCGAGCGGCTGCGATTTCCTGTACAGTATGGATTCTTTTTTATATTTTCGGTACGTGCAACTAATAAATCTTTGCCTCATACACGAACTTAGCGCACGCATGTCCTCCG GAATAGTATTCCAGAGTGTGGGATTCAGTGTCCAGTGCATGCTGGTCCCAAAGATAAACTCGATCTCTTGCAGTTATTCGTCGATCTTACGAACGCTATGACGATTATCCCCCTGGGCACTTTCGGAAATTCTGTTGTGAATGCGGAGCGCCTCATCGTCGACTTCCGTTTCGTACGT GGCATGAGCAAGGCTGTTTGAGGCGAGCTCCCGGAGCCGCTGGTAGTCTATAGATCTCCAGTGTCGGGATGCCATACTGTGACATTCCCTATCAGGCGAGTTTAATTTCCCGAGGTACCATGGATCTTAGATCAGATGCCGTGTCCTCCTAGTCCATTGATTCCTCTCCACAAATTAG CTAGGTGCGTGCCGGTCAATCACAGCTGACAGACGCCGACCCCCGATCATGGGGAACCGTGCCCTACCCTTTGAATAGATCATGAGACACCCAGCTTGTCCTCGATTCCTAACTAGATATTGAGTCCGCTCTGGATTGGAGTATGAAACAATGCCATGAACTTAATCAGCCGATGTTA GCGAGTCTTACGGGTTTGGTCTGCATCCACTGGGGGGTCGGATCCTGTCGTCCCCTTAATCAAGACATTCCTCCCCCACTAGACGCGTAGCCTATAGCCTATCGGCTCAACTTACAGGGGAATCGTGAGCTGCCCATGAATAGATCTCCCTCACCCCCAGATTTCCCTCTCGATAACC TCAACCCTTGCCTGACACAACACTGACAACTTGGCGTCAGTGGAATTGACACCATTACGGTGTGGTCTACCGCTAGGCCGATGCACTGTGTGCACAGCCTGGGCATCCAGAATAGAAACCCAGACCTTACTCCCGGTCGTAGAGAAATTGATCATATACGAAGTCCGTGTTCTGGGAC AGGTCGCGCCTGAGACGTTTAGCCCCCGAATGAACACGGGCTTCTTCTTATGCAAACTCGCGATAGTACCCGCCGCAGCAGAGGATTTCCTTAGATCTCCAGAAAACTTTAAGTTAGAGGATGGTTTTTCATTAACTCAACTATTAATGGTGGCAGGTTTGACTAGAGTCATAATACA TATTGCATTTGTCCTAAGTGAATCGTCCGTGGTGGGGTAAATTGAGCGGCCGGGTACTGCCCCCGCTACTGTAAAGAGAACACCTATACCTTGGAGGGGATTGACAATCTCACTTGTTCGCAGTAAGGACAAAGAACCTATAATAGATCTCCAAGTCCCAAACGATTCTATATCACAG GTACGAGCAGAGAGGTCTCCAGACTTAATTACCGATTAATTCTCAGACTTATGGATGCGGTCCAGATGCAGCCGCCGTGAGTAACCGTGGATACTTGAAGGTCTATGAATAAGCCTCCAGAGATGGCGTGGATGCGGGGGCACCTTACCTATGTTATGCGTTCTTACTAGGCCTGAAA GTAAGCCAGATAGCATTCTTCCATTGTCGGTAGTACCCCGGGGACGTATTTCGACAGTTCAGCTATCACCGGCAGAAACTAGAACCTTTTTCCAGGAGCTTCCGGATGCGTTATTTGGGCAAACTTAGGACAGCATGAATGCGTCTCCAGAAATAAATGATCAGAGCATTACCCCGAT CTCGACGATAGCGCTCAGATCTCCAGAATGTATGCTATCGCAGAACAATAGCGCCCGACATTGCCAGACTCTGCTTCTTGATTCGGTGATCTTATCGTTGAGCGCTGGCTGCAAGTACGATCGTCAACTATAACTTGCGCTTCCCGGTAAAACGCGCAGTAACGCGCCAAGGCCAGAC CTAATGTATCAATCTCTTGCGGACTTTGATGGAACTAGAAAATTCCCGAAAAGCCCCGAAGTCATCTCCAGAGGTAGCATTGTATACAGGTGTAACTAGGGGCCGACATCGTCGGGCCTTAGATTGAACTCACAGATTGCTATCTCAGTTTCTTGACTGCACAGTTACAGATACCATG CTGGCACGTCAGGCTGCGTAACTCGAGCGCCAAGAAATCATGCCCTGGTATTTTAGTGGCGGATCTGAATGATTCTCCAGAAAGTCGGTACAACTCTAGGGTTTCTCTTTGCCATCGAATGGGTGAGACTGAGTGTGTGCAATCGTCATCATAGCGATTTTTTAACTCGTCTCCGCTC AGATCGAATAGATCTTATGAGGAACTAATCTGACTCTCACGTGTCCAGGATGTGGAATCCCGCAGCGGACTTCTCCGCGCTTTCATCTGTCAAACGCACATAACTCTATGCGAGTGTGTGGGACATATCAACGATTGAGGGCAATCAACGAACCGAGGCCAACTGACTGAGCGGGTCG GGTACTGTACTACCTCTTAGACTTGTTGCGGCCTGCCAAAAGGGACGCGGTGAATAGATTGACAGAACTGGAAGTAATGATTGGTGGGACGTGTGACTCAGAGGGACCGATCAATGACCAGCCCGCGTCTCTGGGGCCAAATGACTAGCCGGTAAGCTCGCCACGTTAAGGAGTCTAT CCAGGTAACCACTAGGGAGATCGCTACGTCTATTAGAAACCCGGAAGGTTTAACTTGACTAAGTTACTGCACTGTCAGCTCGGCATGACACCGAATCTGTACAGCGAGTCGGTCGCCCTACGAATAGATCTCTCTAGCTTAATAAATCTCGGTTCGAATACACTTCGAGCCTGAGGAT',15,20,1000))

#print(RandomizeMotifSearch('GACCACCAGTACGTGAAAGTGCGAGGGCCGCTAAGACCTTTACACTGACGGCTTGCTACCATGAGCACATCCTCGTGTACTTGAGACCTTTCCTATCGCACATCCAGAGGGCTATAGGACTGTAAGGGGCGTGCGGGCAAGTCGGTCAACACCGAAACATTGAACCCTATCATCTCGAGAGACCACCAGTACGTG AAAGTGCGAGGGCCGCTAAGACCTTTACACTGACGGCTTGCAGGGTATGACCTCCCTACCATGAGCACATCCTCGTGTACTTGAGACCTTTCCTATCGCACATCCAGAGGGCTATAGGACTGTAAGGGGCGTGCGGGCAAGTCGGTCAACACCGAAACATTGAACCCTATCATCTCGAGAGACCACCAGTACGTG TTCCGATAGTACCGGACTGTTTGCCAGTAGGGCCATGGAATCCTCATGACCTCCTCTCTAGATGATTAGGTCTCACCTCAGATTAACGTTGACCAGAACTAATTATCGTAGTTCCATGCCTGTGTGATTTTAAAGGCGAACGTTATAGCCTACACTCTCTGCACGGCGGCCCCATGCTTTGAAGCTACTTACTAA CGCGCAATACCCATCAGAGAGGGGACGCTGGCTCGTGTTCGATTGGGGCTGATAAAGACACCCACGGCGGTGCTCTTAATTAGACAAACCATGACCTCCTGCGTTATGATTGTCCTGTATACAGCACGCCTTCACATTAAGTCCAACTTGAGTGATATGTCTCCTATTCTGGGAGACGATCCACTAGTCGGCATG GCTATAACACTGCTTTAATTCCTGCCGGCACAACTAATGTTATCCAAAGGGGGATAGGGAGGAAGGTCCAGCAGATGCTAACAGAATGTTGGCCGTGCGTCTGATAGTTAACCTTCTGGTACTTTTAGTGGTTCTTATCAGCACAACCTGGTCAGAACTCCGTCCGTGTGATTTTGCTCATGACCTCACTACCCT TAAGTTCCAGCTCATGAGTCCCCATTCGAGCACTGTGCTTGCTCATCGACGCTCAGAGGACCCGTCGATGTTACAGAATTCTGGCATTTCGTTAGGGGGGCTTGGTCACGTGCATTAGCCGACGCTCCGAGTAATCGATATTCATCGATACGCGTTTTAGCCCCCCATATAGAGCCAAAACGCGCTGCGAACAGA AGGAAAGTAACAAAGGTCCTGAAAGGAATTACCCGAAGCCCACGGGTCTATTGCCATCTCAAGCCGACTAAGGGATCCTTGAGCTACCCATCATGACCTCCTCGACATAACAGCCAGCTTCTATGAGATCTAAATACATCCGGGTGTCATGGGAAGATGTGTCCCACAAACTATAAGGTTCACTAACGCTCTCAA CAAACGTTTATAATCGTACGTCGGAATAGTCACAAATTGACGAAATTGTCTACAATAACACTGATGTCGTAGCTCGAGCTCATGACCTTGTGTGCTCGACTGCATCTGTTCTTCGTACGGTACCTTACGTGGATAACGGGTACGCATGTAACGAGTTACCTTCCCAATCGACAGTGTCGGCTTACCAAGACTATC AGGTCGAAGCTTGCTTGTCAGCTCCCCACCTCCTGAGACGACGGGGTGATACTAGTGATCTACACCCTAGCGCGCCTAATCATAAGTTATTTTCGTACCCGAGAAGTTGAATACCTTAAGCGAAACACGTTAGCAGCCCTAACCCTACAGCCCTGGTTACGCACTTTCGCAGTCAGAAACGGTACATATCTGAGC TTGGCGCAGATTTGGACGGAAGCAATGGCACTAACCTACGGACAATGGCTGGGAGGAGCGTTCCCGGCATGCGGTACATGACACTCGCTGGGAAGAAAGGGCCACCCCAGGGGCTGGGTCCACCCACACCCATTCCGTCAGCTCATGCGATCCCCTGTACGGGGGCGAATTTGCTACAATGAAGACGTCTCGCCT CCTTTGCAGCGTGTGACCTCCGACGTTTCCTATGTAGCGTATTGGAGCCACGAGCCCCCTTTTAGGGCGGAAAAGCAGCTTCGGTTTGTACGCTTAATATAGAGCTTTAACTTTGTGGATTAACAAGTCAGTGCAGATTACTAACATCCTTCTAATAAATGCACCCATCGTAAAGTTACCTATTGGCCCAGTTAC GCTGGTCGAGTTGCCCCCAGGGCAGCTCGAAACCTCCGTAGACACTAGCCTTAGCGCGCACTGTGATCTTGACCGCGTGAGCAACAGCCGACTTGGGCGGTCGCAGCTGATCTAAGTTGATAACTGCCCATAATGCGGGTTTGGCAAACGTAGCTTACATGGACACCAAGGCTTGGGGTTCGTTCCATGGGCATA CAAGTATTTAGCTGGTTCCTTAACCGGGACTTGATTAAGATACAGGAGATGACCTCCGCCTAGTGAACCCGAACTGTTGCGTGGTATATTCAGCGTTGTAGATCAGTATGATCCTAAAACAGGGAGGCACGTAAATCGCCCTCGTCTGTGATCCGACGTTTCAAGTTCTCTAAGGCGCCTGAGCTCAGTTCCTCA GTCGGCCGAAGTCACGAACATCACTACTCTGTGCTACTTCGACTTGCAGAGGTCACTGTAGGCAACGACGCAACCAATGCTTGAACAACTTTTAGCCACACAGCTGGCGACCTCCGTGGTTTATGGTAGCGGGGTAGGCGTCAGGGCGGGTGCTTAACGCTTGCTACTGGTATCGTCCTAGAAGATTCACTCGTT GCCTTTAGTCAACGCCGCTTGGCTCCGAGAGTTACGGACTGGAATCGTCACGATATCCAGAGAAGTACTCAAGGTAGAACCAGTAACCGCAATAGTTCACCTCAATACCTATCATGTCTTGACACACCGCAACTTGTGCGATACCTGTCCGGGGCCTAGAATAAAACTGTCCAGCCGCTGACCTCCATTTCAGCC ACTCTTCTTATAACTTGCCTGGCAGCGCTCCCACTTAGAGAGCCTGACTACGACCACGATGTTCAGCATTTTGTCGGTGTATCTCCACTCGCTGGCCGCGAAACAGCGGACAGGGGAGACGGGCGTCTCCTTGACCGGGGTTTCCCTCATGACCGTGAACTCACAGCACGCCCCACGGTCAGCTCATATACTCCC ATTCCCGGAACGAGTCGGGTCTATGCTCATTCAAATAAGTACGTCAGCTCATGACTAGCATAGAACGTTTGTTACCCGGGCCCCGTAAACTTGCGGGCCCTTTGTAAATGGAACGAATAATGCTTGACCTACTACTCACACAGTGGAGTTGTAGTATAGGGTCTAGCACAAGCAGCGGGAAACGTAGACACGAAG CTAAGTCCGACAGCCAGATGCAGCTCATGACCGAGGACCGGCCACAAGCACCCGGGGTTTACGCCGATGTTACTGGAGCCGCCAAATTCTTCCCCGATCACTTCAGGGGCAGACTTATCGGAACAGCTTCCGACGCAGTCGTTCTTAATCAAAGTGGGGAGCACCATTAAGGCGGAGATGGACGTCGGGCAGAGA TGGTCACATCGGCATAGTTCTGTTTTGTACCAGAGGCTCGGTAAAGCAGGGGCACAGACCAGATCCTCTTAATATTCTTATGAAATCTCCTTCCACGGCTCATATCGAGTCCTATTTGCTTAGGCATGGCAGCTCAATGCCTCCACTTTATCACTTTATTGATGACGTGGGCGCCCGACTCGCCGCGCAAATGCG AGAGCGTTTGGTAGGGTTCGACGGCGGTATGAACCCTTTTGTTCATCAGTTTCACTAGCCATTTACAGCGGCAGCTTGAGACCTCCCAGTAGCCTACGTCTTAGTCAGTTATAATAGACATCTCGGTCAAACGCTTCCATACCCAGCAGCTTAGAGAGATGTGTGGACGAGTCTGTTTTGCATCATGTATACATC',15,20,3000))




print(ProfilemostProbable('CTGTTCGC',3,CreateProfile(['TGA','GTT','GAA','TGT'])))