def Hamming(p,q):
    count =0
    for i in range(len(p)):
        if p[i]!=q[i]:
            count +=1
    return count


def DistanceBetweenPatternAndStrings(Pattern,Dna):
    k = len(Pattern)
    distance = 0
    dna = Dna.split()
    for sText in dna:
        HammingDistance = float('inf')
        for i in range(len(sText)-k+1):
            kmer = sText[i:i+k]
            h = Hamming(Pattern, kmer)
            if HammingDistance > h:
                HammingDistance = h
        distance = distance + HammingDistance
    return distance

#print(DistanceBetweenPatternAndStrings('AAA','TTACCTTAAC GATATCTGTC ACGGCGTTCG CCCTAAAGAG CGTCAGAGGT'))

#print(DistanceBetweenPatternAndStrings('AACACA', 'AGAGGTATGTAAAGCCGATCTTCAGCAAAGCCTCCAATGACGGTACTCGAGTATGACGCTGCGCTTTGCTCTTAGGTCGGCTATCACTGAAACCAGGGCCAGCATATT CGGCCAACGGGTGTGTGAACTATTAGGAGAACCTGTAGCCGCTAGAGTGTCTGCGTTTCGATATGCTAGGAGATACTTCAAAACGGCAGAAATAGGCGCCGAATGGAA TCGTGCTGGGGAGGCGCAGTTATATGAAAAAATATTTGGGACTTTAGGTGGAGGTAGCGGGGCCCTGAGTCTTCTCCGCCCCGCTTTGTTATTGCCCTTGTCTAGCAA TTACCAAGCAACCCGGACCATAGGCTGCGGACTTCACTCAGAGGTTATATTGACCAGTTGACAAGGCGGTTTCCCTCAGTCCAATCAATCGGACTTTTTTCAGGCTGA TCAAGTCACCTGTCTCTTATCTTATTTGTGCCGATTTACTGTGATTGAAGACTTTCCATGCTCTCTAAATTCTCCGAATCTTGCAGCAAGACGGGATAATACGTCTCA CCCTCCCTAGTCAATGATAGCCACGTGTTACCAAGGGAGTTCTCTGCACCAGTAATGCGATCGTGAACACCCGTAGATCCTCTCTATTCGAAGGATCTGGAAGCAAAA GTCCCTAAAGGATGGGGCGTAGCCGTATGCACAAGTCTCTTCCAAAAACGCATGCTGGTCGTGGTTCCAGTTCACCCCGCTGGATGGATCCCAACCAGGCGTATCGTA TCTGTGCATCATTGATTGGGCAACGGGTGGCTCAACTTACAGTTGCGCAAATACCAGTGAAAGGTACCCCAGGACCCCTTAGAAGCCATTATTCAACACGGAGCGGCG GTACAGGATCACCCTTTCTGGTGGCCATCGTCACGTGTTGCTTGGCCCCAGTCGAGCAAGCCCTAGCGATGCGTGCAGCAATTGGGGGGCGCGAACTTCTTTTATCCA ACGGGCCGGGGCGATAAACACAAATAGTGTCATGGTAGCGCAGCTACTGCACGAAGCTGCACAAGGCGGGCCGCAATCCTTTATGACACAGGATTGGTTGTGGTTCTG CTCTTGAGACTATAGAACCCCTACTGCATCCGCGTTTTTAATCAAGGTGAGCGAAAGAGCGTCCGGCGCAATTTCCTCAACGGCTTACCGGTGCCACTTTACCCCGCA CTAAGTACTTGAACACTGACATCTGGCACATTCCAATACCAGGGAGACCATACCGCACTAGGATTTCACTCAGTCTTGGGACGTTAGTACGAATTCTGTCATCTCTGG TTCCCCCAGCGGTGTATTGCATGTTTTTATATCACCCTTCACCTACGGCCCGCCGTATTACAAGTTGCCGTCTATTCGGACAACGCCTCTTCGAATCGAGATGCTCTG ATGCGGACGGTCATGCTGAAATCGTTGGTTCCGCAACTTTCGGGTCCTCGAGTAAAGTCGTGGAACGTTCTGTTCACGTGGGCCCGAGGGACGTCTGTCAGCTGTTGC CATGGAACGGACCCTGACGGGTCCCATCTTTCCGCGGCGATAGGCTCTCATTTCAAGTGCAGTCGAAGTTCTCAACGTGGGGGAACGCTTGCGTTCACGTGATAGTCT TCCGTAGGGCTTTCCCCATAAGGCGTATACTACGGGCGATGTACTCACTAGATGTAGGAGTATGTGTTGGTGGGTCTGGGCGTTAACTTTGATACTGTGTCACGCTAC AACAGAATTCGGGTGCGTATTCCCAGAGGCACTTAGTGTTAATACCCGCTCGTCAAGTTGCTCGATATTTCACGGCTCTTGTCACTCCTCGGTGCAAGCCGCCGTCGA AGAGGAAGCAGACACACGGTCGTACGACCCCCCTCCTATACATCAGCGGGCAAAATCCATCTTGAACCAGTACTGAGCCGTACGAGAACAGTTGCCTCGGCTCAACTC AGGGCTCAAGTGTGCTAAGGTACGCGCGGCGAAATCGAGGGTATACGCCAGGCAACATATCAGAGCCCCCGCGGAGAGAGGGGTTGATTCATTCAGGTGTTCGCCTTT TAGACCTTCAACTAGGTCCCAGGGCCAAACGGTCAGGATCATCTGCGACATGTTATTATAAACCGCTAGTATTCATCAGTTGCAAGGCAAATATACGTCAGCTGTCCA CGTCTCATTGTCTTTATCGAGACTGGTTTGGCTACAGGTCGGGCCAAAAGAACACTGAGCAACTATTGCCCAACGGCCGTCAATATGCCCTCGAGTTGGCGACGGAGT AAGTAGAGGGGGCCTCCGCTGGTCGACTCCTCTGTCCCGACGATAAAGAACGTTACTGCCTATTCGGCGAGGCGTTTTTGCGGATCAATAATGCTCCATAAATCGCGA AGGTAATCCAATGTGATAGCTAGGGGCTTCTGTAGCCTTTTTCAATGGCTACGCAAGTCGTTGGTGAAACTCAAGCTAACTCAGATCGTGGCGTAGTTAATACTGACT CTATCATATCGAAGGTTAGCATGAGGGCGTCACGCGTAATTCCACGCCTATTAGTAGGGTGGGAACCCCCTTACGGCCTGCTAGTTGCCGCGTACTTCTCGTATGACT ACTTAACGGGTGTTGATTGTAACTACCAGACAGTGAGGCCAGATGGATGGTAAACTTCAAGCTTTATTTACTGCATCGGCTTAGCGTAGCTAAGGTAAAATAGACTGT AAAAGGTTATGGGATTCCGCGGAAGCTCGCCGACAGCCAAGTAGCTGAGCGTCAATTGCGCTACTGTGGGCGATTTAATTTTCCGCAACTCTATGTGCTCGTATAGCA GATTTCGCCAGGCCTGTTACTCCTCTTTTCGGCCAAATGCTCTTTTATCCACAGAAGACTTTATCTTGCCTAGTACATGCGGATCCGTTGAGTCGGGCCGGAGTATAG TGCCTAGGGGTGATAATTGCAGCTTGGCAGGTTCGTGGAAAAGGGCGATCCTAGGTTGTTTTAGATCCACCTGGTAGCAAACCCTCAGGAAGGCGGGCACGCTTAGCC GTGGCAACGAGTTCTGAAGGATTCTCGTTACGACTGGTACAGGACTAAGCACCCTGGACCCGTGCCGCTAACCTCTATCACGTAAACGGCAGTTTTGTACGGGTGCCG GGAAGTGGACATTGTGGCCGAATAAGCGACAATGTGCCGACGGCAAAGAGAACACTTGAGGGCAGGGGACTTTGTAGGTGTATGGCCTGATACGTATTTGCTTAGCTT GATGAGGTAGAAGATGTTTGGCGTCGAAATGGTAGCGTCTAGGGGTAGCTTAGCTTGTCCGATGAACTGCCGAAACCCAGCCTTCCGGGTCTTTCTCCGCGGTTAGCG CATAACTGCGTGAACCCCTTGTATCGCCCCGGGATAGGCTGACAGGCTTTTGACTAAGTCCAGAGCTTAACCTTACGCGGTCAGCAGCCTCGGCTAGTTGAACCGACA AGGTTTATCCCTCGCGCTCCTGTAGGCCGTCGCCCGCCATTCTTGCGTGCAGGGATCGTGGCTTATCTTGACTGGTTCCTGTCACGGCCGCGACCTTCGTCAATAGCC'))

def Neighbors(pat,d):
    nucleotide = ['A','C','G','T']
    if d==0:
        return pat
    if len(pat) ==1:
        return nucleotide
    Neighboorhood = set()
    Suffixneighbors = Neighbors(pat[1:len(pat)],d)
    for i in Suffixneighbors:
        if Hamming(i, pat[1:len(pat)])<d:
            for j in nucleotide:
                Neighboorhood.add(j+i)
        else:
            Neighboorhood.add(pat[0]+i)
    return Neighboorhood

def MedianString(Dna, k):

    distance = float('inf')
    Patterns = list(Neighbors('A'*k,k))

    for i in range(len(Patterns)):
        Pattern = Patterns[i]
        d = DistanceBetweenPatternAndStrings(Pattern,Dna)
        if distance > d:
            distance = d
            Median = Pattern
    
    return Median

#print(MedianString('AAATTGACGCAT GACGACCACGTT CGTCAGCGCCTG GCTGAGCACCGG AGTTCGGGACAG',3))

#print(MedianString('GCAGTGAATGCTATGGGGACAGAGAGGGTAGCGCATAGTAGC GTAGTAGCTGCAGTATACCCTGTCGAAATTCTGGGGTATGCA GAGCACGAGATCGTGGGGCCGATACAACAGCTATGGAGTAGC TTGGGGAGAAGCGCTTACTATGTGGGGAGTACCTGTTGAAAC AAATCGAGTGTGTTGGGGGTGGCGTGGTTTGTCGCGAACGTG ACTAATGGTAGCAGGCTGATTCAGTTGGGGCACGTGGTCGCC AACGGTCTCTGGCTGGGGGAAGAGCAGCCAGGGAGCCAAAGT TCCCCAGTGGGGAGTATGACGGCATATTGAATGATAACTCAT GACCTGATGGGGGTAATATATCTCATAAAACATAGCTGCAAT TTTCACATGGGGTACTGCCCAGCACTCCAGAATCTCTCGTGT',6))

print(MedianString('CTCGATGAGTAGGAAAGTAGTTTCACTGGGCGAACCACCCCGGCGCTAATCCTAGTGCCC GCAATCCTACCCGAGGCCACATATCAGTAGGAACTAGAACCACCACGGGTGGCTAGTTTC GGTGTTGAACCACGGGGTTAGTTTCATCTATTGTAGGAATCGGCTTCAAATCCTACACAG',7))
